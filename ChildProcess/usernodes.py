import sys, os, time, random,string
from multiprocessing import Process
sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))

from ecdsa.keys import SigningKey,VerifyingKey
from Structure.transactions import make_transaction
from Crypto_tools import create_sig
randrange = random.randrange

veh_models = [                          # 가상 vehicle_models data
    ('Genesis_GV80',70000),
    ('Porsche_panamera4',150000),
    ('Mercedes_Benz_Sonderklasse',170000),
    ('Bentley_continental_GT',330000),
    ('Rolls_Royce_Ghost',510000),
    ('Lamborghini_Aventador_svj',680000)
]

letters_set = string.ascii_letters+string.digits    # 임의의 이름 생성을 위한 a~z,A~Z,0~9

class UserNode(Process):
    """
    A class of Usernode
    It's ChildProcess, generated by MasterProcess
    It contains 2 functions
        - generate_transaction
            : PRNG를 통해 구성된 차의 개수만큼 Vid의 거래를 시작
            : 이후 5개의 연쇄적인 트랜잭션을 구성
            : 이를 리스트의 형태에 담아 반환
        - run
            : MasterProcess를 통해 시작되는 클래스의 메인 함수
            : generate_transaction을 통해 받은 트랜잭션의 리스트를 송신
            : Fullnode로 연결된 pipe를 통해 각 트랜잭션의 tradeCnt별로 write
            : 또한 각 tradeCnt 간의 시간 간격을 유지하는 동안은 sleep 상태
                -> 이를 통해 Fullnode에서 무한히 돌아가는 5개의 쓰레드와 채굴 프로세싱에 CPU를 양도
    """
    def __init__(self,*args):
        super().__init__()
        user_id,car_num,write_pipe,terminate_event = args
        self.user_id = user_id
        self.write_pipe = write_pipe
        self.my_Vehs = []
        self.terminate_event = terminate_event
        """ 차 정보 정해진 개수만큼 랜덤하게 생성 """
        for _ in range(car_num):
            model,price = veh_models[random.randrange(1,6)]
            vid = ''.join(random.sample(letters_set,10))
            manufactured = str(randrange(1990,2024))+'.'+str(randrange(1,13))+'.'+str(randrange(1,28))
            self.my_Vehs.append((vid,model,price,manufactured))
        """ 타원 곡선: NIST P-192 curve 사용 """

    
    def __str__(self):
        myself = ''
        myself += 'my vehicles:'
        for veh in self.my_Vehs:
            myself+='\n'+str(veh)
        myself+= '\n'

        return myself

    def run(self):
        txs_list = self.generate_transaction()
        for txs in txs_list:
            self.write_pipe.send((txs,self.user_id))
            time.sleep(15)
            if self.terminate_event.is_set():
                break
        self.write_pipe.send((-1,self.user_id))
        self.write_pipe.close()

    def generate_transaction(self):
        keys = [[0]*6 for _ in range(len(self.my_Vehs))]
        txs = []
        for car in range(len(self.my_Vehs)):
            for i in range(6):
                keys[car][i] = SigningKey.generate()    # secret key
        
        
        # pk = sk.get_verifying_key()    # public key
        for i in range(5):
            txs.append([])
            for car in range(len(self.my_Vehs)):
                vid,model,price,manufactured = self.my_Vehs[car]
                tx = make_transaction(keys[car][i].get_verifying_key(),
                                      keys[car][i+1].get_verifying_key(),
                                      vid,
                                      model,
                                      i+1,
                                      price,
                                      manufactured
                                    )
                tx['sig'] = create_sig(keys[car][i],tx['txid'])
                txs[i].append(tx)
        return txs

### 예시 UserNode 및 트랜잭션 출력 ###
## u1 = UserNode(1,4)
## u1.generate_transaction(1)
### 예시 UserNode end ###